generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(20)
  products Product[]

  @@map("brands")
}

model Category {
  id                 Int               @id @default(autoincrement())
  name               String            @db.VarChar(20)
  product_categories ProductCategory[]

  @@map("categories")
}

model Color {
  id               Int             @id @default(autoincrement())
  name             String          @unique @db.VarChar(20)
  hex_code         String          @db.VarChar(7) @map("hex_code")
  is_special       Boolean?        @default(false) @map("is_special")
  product_images   ProductImage[]
  product_variants ProductVariant[]

  @@map("colors")
}

model Gender {
  id       Int      @id @default(autoincrement())
  name     String   @db.VarChar(10)
  products Product[]
  sizes    Size[]

  @@map("genders")
}

model GroundType {
  id                   Int                 @id @default(autoincrement())
  name                 String              @db.VarChar(20)
  product_ground_types ProductGroundType[]

  @@map("ground_types")

}

model OrderItem {
  id                Int             @id @default(autoincrement())
  order_id          Int?            @map("order_id")
  product_variant_id Int?           @map("product_variant_id")
  quantity          Int             @db.SmallInt
  price_at_purchase Decimal         @db.Decimal(8, 2) @map("price_at_purchase")
  order             Order?          @relation(fields: [order_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product_variant   ProductVariant? @relation(fields: [product_variant_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("order_items")
}

model Order {
  id               Int         @id @default(autoincrement())
  user_id          Int?        @map("user_id")
  order_date       DateTime?   @default(now()) @db.Timestamp(6) @map("order_date")
  total_amount     Decimal     @db.Decimal(10, 2) @map("total_amount")
  status           String?     @default("pending") @db.VarChar(20)
  shipping_address String?     @db.VarChar(300) @map("shipping_address")
  billing_address  String?     @db.VarChar(300) @map("billing_address")
  payment_method   String?     @db.VarChar(50) @map("payment_method")
  order_items      OrderItem[]
  user             User?       @relation(fields: [user_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@map("orders")
}

model ProductCategory {
  product_id  Int      @map("product_id")
  category_id Int      @map("category_id")
  category    Category @relation(fields: [category_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([product_id, category_id])
  @@map("product_categories")
}

model ProductGroundType {
  product_id    Int        @map("product_id")
  ground_type_id Int       @map("ground_type_id")
  ground_type   GroundType @relation(fields: [ground_type_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product       Product    @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@id([product_id, ground_type_id])
  @@map("product_ground_types")
}

model ProductImage {
  id                Int      @id @default(autoincrement())
  product_id        Int
  color_id          Int
  image_type        String   @db.VarChar(50)
  sort_order        String   @db.VarChar(10)
  highres_url       String   @db.VarChar(255)
  lowres_url        String   @db.VarChar(255)
  thumbnail_url     String   @db.VarChar(255)
  original_filename String   @db.VarChar(255)
  created_at        DateTime? @default(now()) @db.Timestamptz(6) @map("created_at")
  updated_at        DateTime? @default(now()) @db.Timestamptz(6) @map("updated_at")
  color             Color    @relation(fields: [color_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product           Product  @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([color_id], map: "idx_product_image_color")
  @@index([product_id], map: "idx_product_image_product")
  @@unique([product_id, color_id, image_type, original_filename])

  @@map("product_images")
}

model ProductVariant {
  id         Int         @id @default(autoincrement())
  product_id Int?        @map("product_id")
  sku        String      @unique @db.VarChar(50)
  stock      Int         @default(0) @db.SmallInt
  is_active  Boolean?    @default(true) @map("is_active")
  price      Decimal     @db.Decimal(8, 2)
  color_id   Int?        @map("color_id")
  size_id    Int?        @map("size_id")
  created_at DateTime?   @default(now()) @db.Timestamp(6) @map("created_at")
  order_items OrderItem[]
  color      Color?      @relation(fields: [color_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  product    Product?    @relation(fields: [product_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  size       Size?       @relation(fields: [size_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@unique([product_id, color_id, size_id])
  @@map("product_variants")
}

model Product {
  id                   Int                 @id @default(autoincrement())
  sale                 Int?                @default(0)
  name                 String              @db.VarChar(50)
  base_price           Decimal             @db.Decimal(8, 2) @map("base_price")
  brand_id             Int?                @map("brand_id")
  weight               Decimal?            @db.Decimal(5, 1)
  type_id              Int?                @map("type_id")
  gender_id            Int?                @map("gender_id")
  stability            String?             @db.VarChar(20)
  drop                 Int?                @db.SmallInt
  rating               Decimal?            @default(0.0) @db.Decimal(2, 1)
  one_star             Int?                @default(0) @map("1_star") @db.SmallInt
  two_star             Int?                @default(0) @map("2_star") @db.SmallInt
  three_star           Int?                @default(0) @map("3_star") @db.SmallInt
  four_star            Int?                @default(0) @map("4_star") @db.SmallInt
  five_star            Int?                @default(0) @map("5_star") @db.SmallInt
  review_count         Int?                @default(0) @db.SmallInt @map("review_count")
  is_recommended       Int?                @default(0) @db.SmallInt @map("is_recommended")
  news                 Boolean?            @default(false)
  sole_details         String?             @db.VarChar(500) @map("sole_details")
  upper                String?             @db.VarChar(200)
  material             String?             @db.VarChar(100)
  care_instructions    String?             @db.VarChar(100) @map("care_instructions")
  description          String?             @db.VarChar(1500)
  created_at           DateTime?           @default(now()) @db.Timestamp(6) @map("created_at")
  updated_at           DateTime?           @default(now()) @db.Timestamp(6) @map("updated_at")
  use_details          String?             @db.VarChar(500) @map("use_details")
  use_id               Int?                @map("use_id")
  base_model           String?             @db.VarChar(55) @map("base_model")
  product_categories   ProductCategory[]
  product_ground_types ProductGroundType[]
  product_images       ProductImage[]
  product_variants     ProductVariant[]
  brand                Brand?              @relation(fields: [brand_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  gender               Gender?             @relation(fields: [gender_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  type                 Type?               @relation(fields: [type_id], references: [id], onDelete: Restrict, onUpdate: Restrict)
  use                  Use?                @relation(fields: [use_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@index([base_model], map: "idx_product_base_model")
  @@map("products")
}

model Size {
  id               Int             @id @default(autoincrement())
  eu_size          String          @db.VarChar(10) @map("eu_size")
  uk_size          String          @db.VarChar(10) @map("uk_size")
  us_size          String          @db.VarChar(10) @map("us_size")
  foot_length_cm   Decimal         @db.Decimal(5, 2) @map("foot_length_cm")
  gender_id        Int?            @map("gender_id")
  foot_length_in   Decimal?        @db.Decimal(5, 2) @map("foot_length_in")
  product_variants ProductVariant[]
  gender           Gender?         @relation(fields: [gender_id], references: [id], onDelete: Restrict, onUpdate: Restrict)

  @@unique([eu_size, gender_id])
  @@unique([uk_size, gender_id])
  @@unique([us_size, gender_id])
  @@map("sizes")
}

model Type {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(30)
  products Product[]
  @@map("types")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique @db.VarChar(200)
  password   String   @db.VarChar(200)
  firstname  String?  @db.VarChar(50)
  lastname   String?  @db.VarChar(50)
  phone      String?  @db.VarChar(15)
  role       String?  @default("user") @db.VarChar(10)
  created_at DateTime? @default(now()) @db.Timestamp(6) @map("created_at")
  orders     Order[]

  @@map("users")
}

model Use {
  id       Int       @id @default(autoincrement())
  name     String    @db.VarChar(20)
  products Product[]

  @@map("uses")
}
