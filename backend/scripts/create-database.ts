import { Pool } from "pg";

// Configuration pour se connecter √† PostgreSQL (sans sp√©cifier de database)
const adminPool = new Pool({
  user: "postgres",
  host: "localhost",
  password: "erreg5grfsgUIGHIYfg!",
  port: 5432,
  // Se connecter √† la base par d√©faut pour cr√©er une nouvelle base
  database: "postgres",
});

async function createDatabase() {
  const databaseName = process.argv[2];
  
  if (!databaseName) {
    console.log("‚ùå Erreur : Vous devez sp√©cifier un nom de base de donn√©es");
    console.log("üí° Usage : npm run create-db <nom_de_la_base>");
    console.log("üìù Exemple : npm run create-db MonNouveauProjet");
    process.exit(1);
  }

  try {
    console.log(`üîÑ Cr√©ation de la base de donn√©es '${databaseName}'...`);
    
    // V√©rifier si la base existe d√©j√†
    const checkQuery = `
      SELECT 1 FROM pg_database WHERE datname = $1;
    `;
    const checkResult = await adminPool.query(checkQuery, [databaseName]);
    
    if (checkResult.rows.length > 0) {
      console.log(`‚ö†Ô∏è  La base de donn√©es '${databaseName}' existe d√©j√† !`);
      return;
    }

    // Cr√©er la nouvelle base de donn√©es
    // Note: Les param√®tres ne fonctionnent pas avec CREATE DATABASE
    const createQuery = `CREATE DATABASE "${databaseName}";`;
    await adminPool.query(createQuery);
    
    console.log(`‚úÖ Base de donn√©es '${databaseName}' cr√©√©e avec succ√®s !`);
    
    // Lister toutes les bases de donn√©es
    console.log("\nüìä Bases de donn√©es disponibles :");
    const listQuery = `
      SELECT datname as "Nom de la base" 
      FROM pg_database 
      WHERE datistemplate = false 
      ORDER BY datname;
    `;
    const listResult = await adminPool.query(listQuery);
    console.table(listResult.rows);
    
  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la base :", error);
  } finally {
    await adminPool.end();
  }
}

createDatabase();
